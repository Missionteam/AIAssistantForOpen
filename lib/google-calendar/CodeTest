// import React, { useEffect, useState } from 'react';

// const CLIENT_ID = '<YOUR_CLIENT_ID>';
// const API_KEY = '<YOUR_API_KEY>';
// const DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];
// const SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

// const Calendar: React.FC = () => {
//   const [isAuthorized, setIsAuthorized] = useState(false);
//   const [upcomingEvents, setUpcomingEvents] = useState([]);

//   useEffect(() => {
//     const script = document.createElement("script");
//     script.onload = () => {
//       gapi.load('client:auth2', () => {
//         gapi.client.init({
//           apiKey: API_KEY,
//           clientId: CLIENT_ID,
//           discoveryDocs: DISCOVERY_DOCS,
//           scope: SCOPES
//         }).then(() => {
//           const authInstance = gapi.auth2.getAuthInstance();
//           setIsAuthorized(authInstance.isSignedIn.get());
//           authInstance.isSignedIn.listen(setIsAuthorized);
//           if (isAuthorized) listUpcomingEvents();
//         });
//       });
//     };
//     script.src = "https://apis.google.com/js/api.js";
//     document.body.appendChild(script);
//   }, [isAuthorized]); // re-run when isAuthorized state changes

//   const handleAuthClick = () => {
//     if (!isAuthorized) {
//       gapi.auth2.getAuthInstance().signIn();
//     } else {
//       listUpcomingEvents();
//     }
//   };

//   const handleSignoutClick = () => {
//     gapi.auth2.getAuthInstance().signOut();
//   };

//   const listUpcomingEvents = () => {
//     gapi.client.calendar.events.list({
//       'calendarId': 'primary',
//       'timeMin': (new Date()).toISOString(),
//       'showDeleted': false,
//       'singleEvents': true,
//       'maxResults': 10,
//       'orderBy': 'startTime'
//     }).then((response) => {
//       setUpcomingEvents(response.result.items);
//     });
//   };

//   return (
//     <div>
//       <button id="authorize_button" onClick={handleAuthClick}>
//         {isAuthorized ? 'Refresh' : 'Authorize'}
//       </button>
//       {isAuthorized && <button id="signout_button" onClick={handleSignoutClick}>Sign Out</button>}
//       <div id="content">
//         {upcomingEvents.map((event) => (
//           <p key={event.id}>{event.summary} ({event.start.dateTime || event.start.date})</p>
//         ))}
//       </div>
//     </div>
//   );
// }

// export default Calendar;